from typing import TypeVar, Protocol, Iterator, Iterable

Item = TypeVar('Item')


class ProtocolCollectionable(Protocol[Item]):
    """
    ============================================================================
     Protocol for Objects with Collection-like functionality.
    ============================================================================
    """

    def to_iterable(self) -> Iterable[Item]:
        """
        ========================================================================
         Convert the Object's Items into an Iterable.
        ========================================================================
        """

    def __len__(self) -> int:
        """
        ========================================================================
         Return the Length of the Object's Items.
        ========================================================================
        """

    def __contains__(self, item: Item) -> bool:
        """
        ========================================================================
         Return True if the Object contains a received Item.
        ========================================================================
        """

    def __iter__(self) -> Iterator[Item]:
        """
        ========================================================================
         Enable iteration over the Object's Items.
        ========================================================================
        """

    def __str__(self) -> str:
        """
        ========================================================================
         Return STR-REPR as List.
        ========================================================================
        """
