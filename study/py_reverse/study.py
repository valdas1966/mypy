from typing import Generic, TypeVar, Optional, List

T = TypeVar("T", bound="HasHierarchy")

class HasName:
    @property
    def name(self) -> str: ...

class HasHierarchy(Generic[T]):
    @property
    def parent(self) -> Optional[T]: ...
    @parent.setter
    def parent(self, value: Optional[T]) -> None: ...
    def children(self) -> List[T]: ...
    def add_child(self, child: T) -> None: ...
    def remove_child(self, child: T) -> None: ...

class Shape(HasName, HasHierarchy["Shape"]): ...

class Geometry: ...

class GeometryRectangle(Geometry):
    @property
    def top(self) -> float: ...
    @property
    def left(self) -> float: ...
    @property
    def width(self) -> float: ...
    @property
    def height(self) -> float: ...

class Rectangle(Shape):
    @property
    def related(self) -> GeometryRectangle: ...
    @property
    def absolute(self) -> GeometryRectangle: ...
